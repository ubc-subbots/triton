<?xml version="1.0"?>
<sdf version="1.7">
    <world name="default">
        <!-- Global light source -->
        <include>
            <uri>model://sun</uri>
        </include>

        <!-- Bounding box with sea surface -->
        <include>
            <uri>model://ocean_box</uri>
            <pose>0 0 20 0 0 0</pose>
        </include>

        <include>
            <uri>model://sea_bottom</uri>
            <name>wall1</name>
            <pose>0 -20 0 1.57 0 0</pose>
        </include>

        <include>
            <uri>model://sea_bottom</uri>
            <name>wall2</name>
            <pose>0 20 0 1.57 0 0</pose>
        </include>

        <include>
            <uri>model://sea_bottom</uri>
            <name>wall3</name>
            <pose>0 0 -20 0 0 0</pose>
        </include>
        
        <!-- <include>
            <uri>model://sea_bottom</uri>
            <name>wall4</name>
            <pose>-20 0 0 1.57 0</pose>
        </include> -->

        <include>
            <uri>model://tree</uri>
            <name>tree1</name>
            <pose>0 -3 0 0 0</pose>
        </include>

        <include>
            <uri>model://tree</uri>
            <name>tree2</name>
            <pose>3 -3 -3 0 0</pose>
        </include>

        <include>
            <uri>model://tree</uri>
            <name>tree3</name>
            <pose>-3 0 -1 0 0</pose>
        </include>

        <include>
            <uri>model://tree</uri>
            <name>tree4</name>
            <pose>-3 3 -2 0 0</pose>
        </include>

        <include>
            <uri>model://herkules_ship_wreck</uri>
            <name>ship1</name>
            <pose>10 0 1.57 0 0</pose>
        </include>

        <!-- <include>
            <uri>model://herkules_ship_wreck</uri>
            <name>ship2</name>
            <pose>0 -10 0 0 0</pose>
        </include> -->

        <model name="cube1">
            <static>false</static>
            <include>
                <uri>model://octagon-gman</uri>
            </include>
            <pose>0 0 0 0 0 0</pose>
            <plugin name="initial_velocity" filename="libInitialVelocityPlugin.so">
                <linear>0 0 0</linear>
                <angular>0 0 0</angular>
            </plugin>
        </model>

        <model name="camera_model">
            <pose>2 0 0 0 0 3.14159</pose>
            <static>false</static>

            <!-- <plugin name="random_camera" filename="librandom_camera_plugin.so">
                <radius_range>0.5 7</radius_range>
                <track_model>cube1</track_model>
            </plugin> -->
            <!-- <plugin name="smooth_camera" filename="libsmooth_camera_plugin.so">
                <radius_range>1 5</radius_range>
                <track_model>cube1</track_model>
                <spin_speed>0.05</spin_speed>
            </plugin> -->
            
            <plugin name="track_orbit" filename="libcamera_orbit_plugin.so">
                <radius_range>0.5 5</radius_range>
                <track_model>cube1</track_model>
                <orbit_angle_range>0.1 0.5</orbit_angle_range>
                <camera_angle_range>0.1 0.5</camera_angle_range>
                <height_range>-1 1</height_range>
                <period>10</period>
            </plugin>
           
            <link name="camera_link">
                <gravity>0</gravity>
                <sensor type="depth" name="camera1">
                    <update_rate>50</update_rate>
                    <visualize>true</visualize>
                    <camera>
                        <horizontal_fov>1.92</horizontal_fov>
                        <image>
                            <width>640</width>
                            <height>480</height>
                            <format>B8G8R8</format>
                        </image>
                        <depth_camera></depth_camera>
                        <clip>
                            <near>0.02</near>
                            <far>300</far>
                        </clip>
                        <noise>
                            <type>gaussian</type>
                            <!-- Noise is sampled independently per pixel on each frame.
                   That pixel's noise value is added to each of its color
                   channels, which at that point lie in the range [0,1]. -->

                            <mean>0.0</mean>
                            <stddev>0.007</stddev>
                        </noise>
                    </camera>
                    <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                        <ros>
                            <namespace>triton/gazebo_drivers</namespace>
                        </ros>
                        <camera_name>front_camera</camera_name>
                        <min_depth>0.1</min_depth>
                        <max_depth>500</max_depth>
                    </plugin>
                    <plugin name="bounding_box_controller" filename="libbounding_box_plugin.so">
                        <ros>
                            <namespace>triton/gazebo_drivers</namespace>
                        </ros>
                        <camera_name>front_camera</camera_name>
                        <model_name>cube1</model_name>
                        <class_id>7</class_id>
                    </plugin>
                </sensor>
            </link>
        </model>
        <grid>0</grid>
    </world>
</sdf>